PART II: PHRASE TRIGGERS  (5.0/5.0 points)
PHRASE TRIGGERS

At this point, you have no way of writing a trigger that matches on "New York City" -- the only triggers you know how to write would be a trigger that would fire on "New" AND "York" AND "City" -- which also fires on the phrase "New students at York University love the city". It's time to fix this. Since here you're asking for an exact match, we will require that the cases match, but we'll be a little more flexible on word matching. So, "New York City" will match:

New York City sees movie premiere

In the heart of New York City's famous cafe

New York Cityrandomtexttoproveapointhere

but will not match:

I love new york city

I love    New                 York                  City!!!!!!!!!!!!!!

PROBLEM 9

Implement a phrase trigger (PhraseTrigger) that fires when a given phrase is in any of the story's subject, title, or summary. The phrase should be an argument to the class's constructor. You may find the Python operator in helpful, as in:

>>> print "New York City" in "In the heart of New York City's famous cafe"
True
>>> print "New York City" in "I love new york city"
False
When this is done, the PhraseTrigger unit tests should pass.

Canopy specific instructions:Every time you modify code inps7.pygo to
Run -> Restart Kernel (or hit the CTRL with the dot on your keyboard)
before running ps7_test.py. You have to do this every time you modify the fileps7.pyand want to run the fileps7_test.py, otherwise changes to the former will not be incorporated in the latter.

Note: In addition to the class in this problem (PhraseTrigger), please provide your definitions of WordTrigger, TitleTrigger, SubjectTrigger, and SummaryTrigger in the following box.

Answer:

# Enter your code for WordTrigger, TitleTrigger,
# SubjectTrigger, SummaryTrigger, and PhraseTrigger in this box
class PhraseTrigger(Trigger):
    def __init__(self, phrase):
        self.phrase = phrase
    def evaluate(self, story):
       if self.phrase in story.getTitle():
          return True
       elif self.phrase in story.getSubject():
            return True
       elif self.phrase in story.getSummary():
            return True
       else:
            return False
   
class WordTrigger(Trigger):
    def __init__(self, word):
        self.word = word
    def removePunc(const):
        '''Where const is the string to convert  '''
        import string
        punc = string.punctuation
        for i in punc:
            const = const.replace(i, ' ')
        return const
    def isWordIn(self, text):
            text = text.lower()
            self.word = self.word.lower()
            for i in string.punctuation:
                text = text.replace(i,' ')
            words = text.split(' ')
           
            found = False
            if self.word in words:
                found = True
            return found
 
class TitleTrigger(WordTrigger):
    def evaluate(self, story):
        return self.isWordIn(story.getTitle())
 
class SubjectTrigger(WordTrigger):
    def evaluate(self, story):
        return self.isWordIn(story.getSubject())
   
class SummaryTrigger(WordTrigger):
    def evaluate(self, story):
        return self.isWordIn(story.getSummary())
